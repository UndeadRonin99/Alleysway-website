@using XBCAD.ViewModels
@model ClientSessionsViewModel
@using System.Globalization

@{
    ViewData["Title"] = "Client Details";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var cultureInfo = new CultureInfo("en-ZA"); // South African Rand (R)
}

<!-- Include jsPDF and html2canvas libraries -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>

<div class="container">
    <div class="top-buttons">
        <div class="back-button">
            <a href="@Url.Action("Income", "Admin")" class="btn-back">Client Portfolio Page</a>
        </div>
        <!-- Add Download PDF Button -->
        <div class="download-button">
            <button onclick="generatePDF()" class="btn-download">Download PDF</button>
        </div>
    </div>

    <h1 class="page-title">Sessions with @Model.Client.Name</h1>

    <div class="client-details">
        @if (!string.IsNullOrEmpty(Model.Client.ProfileImageBase64))
        {
            <img src="data:image/png;base64,@Model.Client.ProfileImageBase64" alt="Profile image of @Model.Client.Name" class="client-image">
        }
        else
        {
            <img src="@Model.Client.ProfileImageUrl" alt="Profile image of @Model.Client.Name" class="client-image">
        }
        <h2 class="client-name">@Model.Client.Name</h2>
        <div class="client-info">
            <p><strong>Total Amount Paid:</strong> @Model.TotalAmountPaid.ToString("C", cultureInfo)</p>
            <p><strong>Total Amount Owed:</strong> @Model.TotalAmountDue.ToString("C", cultureInfo)</p>
        </div>
    </div>

    <!-- Filters Section -->
    <div class="filter-section">
        <label for="startDateFilter" class="filter-label">Start Date:</label>
        <input type="date" id="startDateFilter" class="filter-input" onchange="filterSessions()" />

        <label for="endDateFilter" class="filter-label">End Date:</label>
        <input type="date" id="endDateFilter" class="filter-input" onchange="filterSessions()" />

        <label for="paymentStatusFilter" class="filter-label">Payment Status:</label>
        <select id="paymentStatusFilter" class="filter-select" onchange="filterSessions()">
            <option value="all">All</option>
            <option value="paid">Paid</option>
            <option value="unpaid">Unpaid</option>
        </select>
    </div>

    <h3 class="section-title">Session History</h3>
    <div class="table-responsive">
        <table class="session-table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Start Time</th>
                    <th>End Time</th>
                    <th>Total Amount</th>
                    <th>Paid</th>
                </tr>
            </thead>
            <tbody id="session-table-body">
                @foreach (var session in Model.Sessions.OrderByDescending(s => DateTime.Parse(s.StartDateTime)))
                {
                    <tr data-date="@DateTimeOffset.Parse(session.StartDateTime).ToString("yyyy-MM-dd")"
                        data-paid="@(session.Paid ? "paid" : "unpaid")">
                        <td>@DateTimeOffset.Parse(session.StartDateTime).ToString("yyyy-MM-dd")</td>
                        <td>@DateTimeOffset.Parse(session.StartDateTime).ToString("HH:mm")</td>
                        <td>@DateTimeOffset.Parse(session.EndDateTime).ToString("HH:mm")</td>
                        <td>@session.TotalAmount.ToString("C", cultureInfo)</td>
                        <td>
                            <input type="checkbox" class="paid-checkbox" @(session.Paid ? "checked" : "") disabled />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <h3 class="section-title">Totals</h3>
    <div class="totals-info">
        <p><strong>Total Amount Due:</strong> <span id="total-amount-due">@Model.TotalAmountDue.ToString("C", cultureInfo)</span></p>
        <p><strong>Total Amount Paid:</strong> <span id="total-amount-paid">@Model.TotalAmountPaid.ToString("C", cultureInfo)</span></p>
    </div>
</div>

<!-- Include jQuery -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Filtering Script -->
<script>
    function filterSessions() {
        var startDate = document.getElementById('startDateFilter').value;
        var endDate = document.getElementById('endDateFilter').value;
        var paymentStatus = document.getElementById('paymentStatusFilter').value;

        var rows = document.querySelectorAll('#session-table-body tr');

        var totalAmountDue = 0;
        var totalAmountPaid = 0;

        rows.forEach(function (row) {
            var sessionDate = row.getAttribute('data-date');
            var paidStatus = row.getAttribute('data-paid');

            var showRow = true;

            // Filter by start date
            if (startDate && sessionDate < startDate) {
                showRow = false;
            }

            // Filter by end date
            if (endDate && sessionDate > endDate) {
                showRow = false;
            }

            // Filter by payment status
            if (paymentStatus !== 'all' && paidStatus !== paymentStatus) {
                showRow = false;
            }

            // Show or hide the row
            row.style.display = showRow ? '' : 'none';

            // Update totals based on visible rows
            if (showRow) {
                var amountCell = row.cells[3]; // Total Amount cell
                var amountText = amountCell.innerText;
                var amount = parseCurrency(amountText);

                if (paidStatus === 'paid') {
                    totalAmountPaid += amount;
                } else {
                    totalAmountDue += amount;
                }
            }
        });

        // Update the totals in the Totals section with the formatted currency
        document.getElementById('total-amount-due').innerText = formatCurrency(totalAmountDue);
        document.getElementById('total-amount-paid').innerText = formatCurrency(totalAmountPaid);
    }
    async function generatePDF() {
        const { jsPDF } = window.jspdf; // Access jsPDF from the library
        const pdf = new jsPDF('p', 'mm', 'a4'); // Create a new PDF instance

        // Select the content you want to convert to PDF
        const content = document.querySelector('.container');

        // Use html2canvas to take a snapshot of the content
        const canvas = await html2canvas(content, {
            scale: 2, // Increase scale for better resolution
            useCORS: true // Enable cross-origin images
        });

        // Convert the canvas to an image data URL
        const imgData = canvas.toDataURL('image/png');

        // Calculate the width and height to fit the PDF page
        const imgWidth = 190; // Width in mm (A4 width is 210mm with 20mm total margins)
        const pageHeight = 297; // A4 page height in mm
        const imgHeight = canvas.height * imgWidth / canvas.width; // Maintain aspect ratio

        let heightLeft = imgHeight;
        let position = 10; // Starting position on Y axis

        // Add the image to the PDF
        pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;

        // Add additional pages if necessary
        while (heightLeft > 0) {
            position = heightLeft - imgHeight;
            pdf.addPage();
            pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
            heightLeft -= pageHeight;
        }

        // Download the PDF
        pdf.save('Client_Details.pdf');
    }
    // Function to parse currency string to number
    function parseCurrency(value) {
        // Remove currency symbol
        var amountText = value.replace('R', '');
        // Remove spaces (thousands separators)
        amountText = amountText.replace(/\s/g, '');
        // Replace comma with dot for decimal point
        amountText = amountText.replace(',', '.');
        return parseFloat(amountText);
    }

    // Function to format number as currency
    function formatCurrency(value) {
        // Ensure value is a number
        value = Number(value) || 0;

        // Round to two decimals
        value = value.toFixed(2);

        // Split into integer and decimal parts
        var parts = value.toString().split('.');

        // Add thousand separators to integer part
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ' ');

        // Join integer and decimal parts with comma
        return 'R' + parts.join(',');
    }
</script>




<style>
    .btn-download {
        background-color: #28a745;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-weight: bold;
        transition: background-color 0.3s ease;
    }

        .btn-download:hover {
            background-color: #218838;
        }

    .top-buttons {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }

    .back-button {
        text-align: left;
        margin-bottom: 20px;
    }

    .btn-back {
        background-color: #FC670B;
        color: white;
        padding: 10px 15px;
        text-decoration: none;
        border-radius: 5px;
        font-weight: bold;
        transition: background-color 0.3s ease;
    }

        .btn-back:hover {
            background-color: #5a6268;
        }
    /* General container and page layout */
    .container {
        background-color: #f5f5f5;
        border-radius: 15px;
        padding: 40px;
        max-width: 900px;
        margin: 40px auto;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .page-title {
        font-size: 28px;
        font-weight: bold;
        color: #333;
        text-align: center;
        margin-bottom: 30px;
    }

    /* Client details */
    .client-details {
        text-align: center;
        margin-bottom: 30px;
    }

    .client-image {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        object-fit: cover;
        margin-bottom: 15px;
        border: 3px solid #ddd;
    }

    .client-name {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .client-info p {
        font-size: 18px;
        margin: 5px 0;
    }

    /* Filter section */
    .filter-section {
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .filter-label {
        font-weight: bold;
    }

    .filter-input, .filter-select {
        padding: 5px 10px;
        font-size: 16px;
        border-radius: 5px;
        border: 1px solid #ccc;
    }

        .filter-input:focus, .filter-select:focus {
            border-color: #FC670B;
            outline: none;
        }

    /* Session history table */
    .table-responsive {
        overflow-x: auto;
    }

    .session-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        .session-table th, .session-table td {
            padding: 12px 15px;
            border: 1px solid #ddd;
            text-align: center;
        }

        .session-table th {
            background-color: #f2f2f2;
            font-weight: bold;
        }

    /* Section title styling */
    .section-title {
        font-size: 22px;
        font-weight: bold;
        margin-top: 40px;
        color: #333;
    }

    /* Totals section */
    .totals-info {
        margin-top: 20px;
        font-size: 18px;
        text-align: left;
    }

    /* Disable pointer events on disabled checkboxes */
    .paid-checkbox[disabled] {
        pointer-events: none;
    }

    /* Custom checkbox styling for green background when checked */
    .paid-checkbox {
        appearance: none;
        width: 20px;
        height: 20px;
        border: 2px solid #ddd;
        border-radius: 3px;
        display: inline-block;
        position: relative;
        cursor: not-allowed;
    }

        .paid-checkbox:checked {
            background-color: #28a745; /* Green background for checked state */
            border-color: #28a745; /* Green border for checked state */
        }

            .paid-checkbox:checked::after {
                content: '';
                position: absolute;
                top: 2px;
                left: 6px;
                width: 6px;
                height: 12px;
                border: solid white;
                border-width: 0 2px 2px 0;
                transform: rotate(45deg);
            }
</style>

