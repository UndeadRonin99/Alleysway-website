@using XBCAD.ViewModels
@using System.Globalization

@model PaymentOverviewViewModel
@{
    ViewData["Title"] = "Payment Management";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var cultureInfo = new CultureInfo("en-ZA"); // South African Rand (R)

    // Flatten and sort the sessions
    var allSessions = new List<SessionWithClientViewModel>();
    foreach (var clientSessions in Model.Sessions)
    {
        foreach (var session in clientSessions.Sessions)
        {
            allSessions.Add(new SessionWithClientViewModel
                    {
                        Session = session,
                        Client = clientSessions.Client
                    });
        }
    }
    allSessions = allSessions.OrderByDescending(s => DateTime.Parse(s.Session.StartDateTime)).ToList();
}

<div class="container">
    <h1 class="page-title">Payment Management</h1>

    <!-- Navigation Button -->
    <div class="navigation-button">
        <a href="@Url.Action("Income", "Admin")" class="btn-income">Individual Client Portfolio</a>
    </div>

    <div class="analytics-section">
        <div class="analytics-item">
            <h2>Total Sessions</h2>
            <p id="total-sessions">@Model.TotalSessions</p>
        </div>
        <div class="analytics-item">
            <h2>Total Income</h2>
            <p id="total-income">R @Model.TotalIncome.ToString("N2")</p>
        </div>
        <div class="analytics-item">
            <h2>Total Paid Sessions</h2>
            <p id="total-paid-sessions">@(Model.TotalSessions - Model.TotalUnpaidSessions)</p>
        </div>
        <div class="analytics-item">
            <h2>Total Unpaid Sessions</h2>
            <p id="total-unpaid-sessions">@Model.TotalUnpaidSessions</p>
        </div>
    </div>

    <div class="filter-section">
        <input type="text" id="search-bar" class="filter-input" placeholder="Search by Client Name" oninput="filterResults()" />

        <label for="statusFilter" class="filter-label">Filter by Status:</label>
        <select id="statusFilter" class="filter-select" onchange="filterResults()">
            <option value="all">All</option>
            <option value="paid">Paid</option>
            <option value="unpaid">Unpaid</option>
        </select>

        <label for="dateFilter" class="filter-label">Filter by Date:</label>
        <input type="date" id="dateFilterStart" class="filter-date" onchange="filterResults()" />
        <input type="date" id="dateFilterEnd" class="filter-date" onchange="filterResults()" />
    </div>

    <table class="payment-overview-table">
        <thead>
            <tr>
                <th>Client Name</th>
                <th>Date</th>
                <th>Start Time</th>
                <th>End Time</th>
                <th>Total Amount</th>
                <th>Paid</th>
            </tr>
        </thead>
        <tbody id="payment-overview-body">
            @foreach (var item in allSessions)
            {
                var session = item.Session;
                var client = item.Client;
                <tr data-client="@client.Name"
                    data-status="@(session.Paid ? "paid" : "unpaid")"
                    data-date="@session.StartDateTime"
                    data-total-amount="@session.TotalAmount"
                    data-paid="@(session.Paid ? "true" : "false")">
                    <td class="client-info-cell">
                        <img src="@client.ProfileImageUrl" alt="Profile image of @client.Name" class="client-profile-image" />
                        @client.Name
                    </td>
                    <td>@DateTimeOffset.Parse(session.StartDateTime).ToString("dd MMM yyyy")</td>
                    <td>@DateTimeOffset.Parse(session.StartDateTime).ToString("HH:mm")</td>
                    <td>@DateTimeOffset.Parse(session.EndDateTime).ToString("HH:mm")</td>
                    <td>R @session.TotalAmount.ToString("N2")</td>
                    <td>
                        <select class="status-dropdown"
                                data-session-id="@session.SessionKey"
                                data-client-id="@client.Id">
                            <option value="paid" selected="@(session.Paid ? "selected" : null)">Paid</option>
                            <option value="unpaid" selected="@(session.Paid ? null : "selected")">Unpaid</option>
                        </select>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>



<!-- Include jQuery -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    $(document).ready(function () {
        // Apply styles to all status dropdowns
        $('.status-dropdown').each(function () {
            updateSelectStyle($(this));
        });

        // Handle dropdown changes
        $(document).on('change', '.status-dropdown', function () {
            var select = $(this);
            var sessionId = select.data('session-id');
            var clientId = select.data('client-id');
            var statusValue = select.val();
            var isPaid = statusValue === 'paid';

            $.ajax({
                url: '@Url.Action("UpdateSessionPaymentStatus", "Admin")',
                type: 'POST',
                data: {
                    sessionId: sessionId,
                    isPaid: isPaid,
                    clientId: clientId
                },
                success: function (response) {
                    if (response.success) {
                        // Update the data attributes and status text
                        var row = select.closest('tr');
                        row.attr('data-paid', isPaid ? 'true' : 'false');
                        row.attr('data-status', isPaid ? 'paid' : 'unpaid');

                        // Update the select element's style
                        updateSelectStyle(select);

                        // Recalculate totals
                        filterResults();
                    } else {
                        alert('Error updating payment status: ' + response.message);
                        // Revert selection if update fails
                        select.val(isPaid ? 'unpaid' : 'paid');
                        updateSelectStyle(select);
                    }
                },
                error: function () {
                    alert('Error updating payment status.');
                    // Revert selection if error
                    select.val(isPaid ? 'unpaid' : 'paid');
                    updateSelectStyle(select);
                }
            });
        });
    });

    function updateSelectStyle(select) {
        var statusValue = select.val();
        if (statusValue === 'paid') {
            select.css('background-color', '#d4edda'); // light green
            select.css('color', '#155724'); // dark green text
        } else {
            select.css('background-color', '#f8d7da'); // light red
            select.css('color', '#721c24'); // dark red text
        }
    }

    function filterResults() {
        var searchValue = document.getElementById('search-bar').value.toLowerCase();
        var statusValue = document.getElementById('statusFilter').value;
        var startDateValue = document.getElementById('dateFilterStart').value;
        var endDateValue = document.getElementById('dateFilterEnd').value;

        var rows = document.querySelectorAll('#payment-overview-body tr');

        var totalSessions = 0;
        var totalIncome = 0;
        var totalPaidSessions = 0;
        var totalUnpaidSessions = 0;

        rows.forEach(function (row) {
            var clientName = row.getAttribute('data-client').toLowerCase();
            var status = row.getAttribute('data-status');
            var sessionDate = row.getAttribute('data-date');
            var sessionDateObj = new Date(sessionDate);
            var totalAmount = parseFloat(row.getAttribute('data-total-amount'));
            var isPaid = row.getAttribute('data-paid') === 'true';

            var showRow = true;

            // Filter by client name
            if (searchValue && !clientName.includes(searchValue)) {
                showRow = false;
            }

            // Filter by status
            if (statusValue !== 'all' && status !== statusValue) {
                showRow = false;
            }

            // Filter by date range
            if (startDateValue) {
                var startDate = new Date(startDateValue);
                if (sessionDateObj < startDate) {
                    showRow = false;
                }
            }
            if (endDateValue) {
                var endDate = new Date(endDateValue);
                endDate.setHours(23, 59, 59, 999); // Set to the end of the day
                if (sessionDateObj > endDate) {
                    showRow = false;
                }
            }

            // Show or hide the row
            row.style.display = showRow ? '' : 'none';

            // Recalculate totals based on visible rows
            if (showRow) {
                totalSessions += 1;
                if (isPaid) {
                    totalPaidSessions += 1;
                    totalIncome += totalAmount; // Sum only paid amounts
                } else {
                    totalUnpaidSessions += 1;
                }
            }
        });

        // Update the summary totals in the analytics section
        document.getElementById('total-sessions').innerText = totalSessions;
        document.getElementById('total-income').innerText = 'R ' + totalIncome.toFixed(2);
        document.getElementById('total-paid-sessions').innerText = totalPaidSessions;
        document.getElementById('total-unpaid-sessions').innerText = totalUnpaidSessions;
    }
</script>


<style>
    /* Container styling */
    .container {
        max-width: 1200px;
        margin: 20px auto;
        padding: 30px;
        background-color: #ffffff;
        border-radius: 15px;
        box-shadow: 0px 5px 20px rgba(0, 0, 0, 0.1);
    }

    /* Page title */
    .page-title {
        font-size: 36px;
        font-weight: bold;
        color: #333;
        text-align: center;
        margin-bottom: 30px;
    }

    /* Navigation button */
    .navigation-button {
        text-align: right;
        margin-bottom: 20px;
    }

    .btn-income {
        background-color: #27262C;
        color: white;
        padding: 10px 20px;
        text-decoration: none;
        border-radius: 5px;
        font-weight: bold;
        transition: background-color 0.3s;
    }

        .btn-income:hover {
            background-color: #27262C;
        }

    /* Analytics section styling */
    .analytics-section {
        display: flex;
        gap: 20px;
        margin-bottom: 40px;
        justify-content: space-between;
    }

    .analytics-item {
        background-color: #FC670B;
        color: white;
        padding: 25px;
        border-radius: 10px;
        text-align: center;
        flex: 1;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
    }

        .analytics-item h2 {
            margin: 0 0 10px;
            font-size: 22px;
        }

        .analytics-item p {
            font-size: 28px;
            font-weight: bold;
            margin: 0;
        }

    /* Filter section styling */
    .filter-section {
        margin-bottom: 30px;
        display: flex;
        gap: 15px;
        align-items: center;
    }

    .filter-input, .filter-select, .filter-date {
        padding: 10px;
        font-size: 16px;
        border-radius: 5px;
        border: 1px solid #ccc;
        transition: border-color 0.3s;
    }

        .filter-input:focus, .filter-select:focus, .filter-date:focus {
            border-color: #FC670B;
            outline: none;
        }

    .filter-label {
        font-weight: bold;
    }

    /* Table styling */
    .payment-overview-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        .payment-overview-table th, .payment-overview-table td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .payment-overview-table th {
            background-color: #FC670B;
            color: white;
            font-size: 18px;
        }

        .payment-overview-table tbody tr:nth-child(odd) {
            background-color: #f9f9f9;
        }

        .payment-overview-table tbody tr:hover {
            background-color: #f1f1f1;
        }

    /* Client profile image styling */
    .client-info-cell {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .client-profile-image {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid #ddd;
    }

    /* Status dropdown styling */
    .status-dropdown {
        width: 100px;
        padding: 5px;
        border-radius: 5px;
        border: 1px solid #ccc;
    }
</style>
