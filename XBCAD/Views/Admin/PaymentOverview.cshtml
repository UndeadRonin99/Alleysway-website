@using XBCAD.ViewModels
@using System.Globalization

@model PaymentOverviewViewModel
@{
    ViewData["Title"] = "Payment Overview";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="container">
    <h1 class="page-title">Payment Overview</h1>

    <div class="analytics-section">
        <div class="analytics-item">
            <h2>Total Sessions</h2>
            <p>@Model.TotalSessions</p>
        </div>
        <div class="analytics-item">
            <h2>Total Income</h2>
            <p>R @Model.TotalIncome.ToString("N2")</p>
        </div>
        <div class="analytics-item">
            <h2>Total Unpaid Sessions</h2>
            <p>@Model.TotalUnpaidSessions</p>
        </div>
    </div>

    <div class="filter-section">
        <input type="text" id="search-bar" class="filter-input" placeholder="Search by Client Name" oninput="filterResults()" />

        <label for="statusFilter" class="filter-label">Filter by Status:</label>
        <select id="statusFilter" class="filter-select" onchange="filterResults()">
            <option value="all">All</option>
            <option value="paid">Paid</option>
            <option value="unpaid">Unpaid</option>
        </select>

        <label for="dateFilter" class="filter-label">Filter by Date:</label>
        <input type="date" id="dateFilterStart" class="filter-date" onchange="filterResults()" />
        <input type="date" id="dateFilterEnd" class="filter-date" onchange="filterResults()" />
    </div>

    <table class="payment-overview-table">
        <thead>
            <tr>
                <th>Client Name</th>
                <th>Date</th>
                <th>Total Amount</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody id="payment-overview-body">
            @foreach (var clientSessions in Model.Sessions)
            {
                foreach (var session in clientSessions.Sessions)
                {
                    <tr data-client="@clientSessions.Client.Name" data-status="@(session.Paid ? "paid" : "unpaid")" data-date="@session.StartDateTime">
                        <td class="client-info-cell">
                            <img src="@clientSessions.Client.ProfileImageUrl" alt="Profile image of @clientSessions.Client.Name" class="client-profile-image" />
                            @clientSessions.Client.Name
                        </td>
                        <td>@DateTime.Parse(session.StartDateTime).ToString("dd MMM yyyy")</td>
                        <td>R @session.TotalAmount.ToString("N2")</td>
                        <td class="@(session.Paid ? "status-paid" : "status-unpaid")">
                            @(session.Paid ? "Paid" : "Unpaid")
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<script>
    function filterResults() {
        var searchValue = document.getElementById('search-bar').value.toLowerCase();
        var statusValue = document.getElementById('statusFilter').value;
        var startDateValue = document.getElementById('dateFilterStart').value;
        var endDateValue = document.getElementById('dateFilterEnd').value;

        var rows = document.querySelectorAll('#payment-overview-body tr');

        rows.forEach(function (row) {
            var clientName = row.getAttribute('data-client').toLowerCase();
            var status = row.getAttribute('data-status');
            var sessionDate = row.getAttribute('data-date');
            var sessionDateObj = new Date(sessionDate);

            var showRow = true;

            // Filter by client name
            if (searchValue && !clientName.includes(searchValue)) {
                showRow = false;
            }

            // Filter by status
            if (statusValue !== 'all' && status !== statusValue) {
                showRow = false;
            }

            // Filter by date range
            if (startDateValue) {
                var startDate = new Date(startDateValue);
                if (sessionDateObj < startDate) {
                    showRow = false;
                }
            }
            if (endDateValue) {
                var endDate = new Date(endDateValue);
                endDate.setHours(23, 59, 59, 999); // Set to the end of the day
                if (sessionDateObj > endDate) {
                    showRow = false;
                }
            }

            // Show or hide the row
            row.style.display = showRow ? '' : 'none';
        });
    }
</script>


<style>
    /* Container styling */
    .container {
        max-width: 1200px;
        margin: 20px auto;
        padding: 30px;
        background-color: #ffffff;
        border-radius: 15px;
        box-shadow: 0px 5px 20px rgba(0, 0, 0, 0.1);
    }

    /* Page title */
    .page-title {
        font-size: 36px;
        font-weight: bold;
        color: #333;
        text-align: center;
        margin-bottom: 30px;
    }

    /* Analytics section styling */
    .analytics-section {
        display: flex;
        gap: 20px;
        margin-bottom: 40px;
        justify-content: space-between;
    }

    .analytics-item {
        background-color: #FC670B;
        color: white;
        padding: 25px;
        border-radius: 10px;
        text-align: center;
        flex: 1;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
    }

        .analytics-item h2 {
            margin: 0 0 10px;
            font-size: 22px;
        }

        .analytics-item p {
            font-size: 28px;
            font-weight: bold;
            margin: 0;
        }

    /* Filter section styling */
    .filter-section {
        margin-bottom: 30px;
        display: flex;
        gap: 15px;
        align-items: center;
    }

    .filter-input, .filter-select, .filter-date {
        padding: 10px;
        font-size: 16px;
        border-radius: 5px;
        border: 1px solid #ccc;
        transition: border-color 0.3s;
    }

        .filter-input:focus, .filter-select:focus, .filter-date:focus {
            border-color: #FC670B;
            outline: none;
        }

    .filter-label {
        font-weight: bold;
    }

    /* Table styling */
    .payment-overview-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        .payment-overview-table th, .payment-overview-table td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .payment-overview-table th {
            background-color: #FC670B;
            color: white;
            font-size: 18px;
        }

        .payment-overview-table tbody tr:nth-child(odd) {
            background-color: #f9f9f9;
        }

        .payment-overview-table tbody tr:hover {
            background-color: #f1f1f1;
        }

    .status-paid {
        color: green;
        font-weight: bold;
    }

    .status-unpaid {
        color: red;
        font-weight: bold;
    }

    /* Client profile image styling */
    .client-info-cell {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .client-profile-image {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid #ddd;
    }
</style>
