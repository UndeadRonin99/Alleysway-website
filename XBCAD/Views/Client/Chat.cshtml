@{
    ViewData["Title"] = "Chat";
    Layout = "~/Views/Shared/_ClientLayout.cshtml";
}

<div class="chat-container">
    <div id="user-list" class="user-list">
        <ul id="users"></ul>
    </div>

    <div id="chat-container" class="chat-window">
        <div id="chat-header">
            <span id="chatWith">Select a user</span>
        </div>

        <div id="messages" class="message-area"></div>

        <div class="input-area">
            <input type="text" id="messageInput" placeholder="Type your message here..." />
            <button id="sendButton">Send</button>
        </div>
    </div>
</div>

<style>
    body {
        font-family: 'Arial', sans-serif;
        background-color: #E1E1E1;
        margin: 0;
        padding: 0;
        overflow: hidden; /* Remove page scroll */
    }

    .chat-container {
        display: flex;
        height: 95vh;
        background-color: #333;
        border-radius: 20px; /* Rounded corners for the entire container */
        overflow: hidden; /* Prevent overflow of rounded corners */
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3); /* Add some shadow for effect */
    }

    .user-list {
        width: 30%;
        background-color: #1E1E1E;
        color: white;
        padding: 10px;
        overflow-y: auto;
        border-top-left-radius: 20px; /* Round top-left corner */
        border-bottom-left-radius: 20px; /* Round bottom-left corner */
    }

    #users {
        list-style-type: none;
        padding: 0;
    }

        #users li {
            display: flex;
            align-items: center;
            padding: 20px;
            margin: 5px 0;
            background-color: #FF4F17;
            color: white;
            border-radius: 10px; /* Rounded user list items */
            cursor: pointer;
            font-size: 20px;
        }

            #users li:hover {
                background-color: #FF7F50;
            }

            #users li img {
                width: 40px;
                height: 40px;
                border-radius: 50%; /* Make profile images circular */
                margin-right: 8px;
            }

    .chat-window {
        width: 80%;
        background-color: #2E2E2E;
        display: flex;
        flex-direction: column;
        border-top-right-radius: 20px; /* Round top-right corner */
        border-bottom-right-radius: 20px; /* Round bottom-right corner */
    }

    #chat-header {
        padding: 10px;
        font-size: 16px;
        background-color: #333;
        color: white;
        text-align: center;
        font-weight: bold;
        border-top-right-radius: 20px; /* Rounded top-right corner of header */
    }

    .message-area {
        flex-grow: 1;
        padding: 10px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        color: white;
    }

        .message-area .bubble {
            max-width: 55%;
            margin-bottom: 8px;
            padding: 8px;
            border-radius: 20px; /* Rounded message bubbles */
            position: relative;
            font-size: 14px;
        }

        .message-area .sent {
            background-color: #FF4F17;
            color: white;
            align-self: flex-end;
            text-align: left;
        }

        .message-area .received {
            background-color: #3E3E3E;
            color: white;
            align-self: flex-start;
            text-align: left;
        }

        .message-area .bubble-text {
            margin-right: 10px;
            word-wrap: break-word;
        }

        .message-area .timestamp {
            font-size: 10px;
            color: #ccc;
            white-space: nowrap;
            align-self: flex-end;
        }

    .input-area {
        display: flex;
        background-color: #333;
        padding: 8px;
        align-items: center;
        border-bottom-right-radius: 20px; /* Rounded bottom-right corner for input */
    }

        .input-area input {
            width: 85%;
            padding: 8px;
            border-radius: 20px; /* Rounded input field */
            border: none;
            font-size: 14px;
            background-color: #1E1E1E;
            color: white;
        }

        .input-area button {
            width: 12%;
            background-color: #FF4F17;
            color: white;
            border: none;
            padding: 8px;
            cursor: pointer;
            font-size: 14px;
            margin-left: 8px;
            border-radius: 20px; /* Rounded button */
        }

            .input-area button:hover {
                background-color: #FF7F50;
            }
</style>

<script src="https://www.gstatic.com/firebasejs/9.15.0/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.15.0/firebase-database-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.15.0/firebase-auth-compat.js"></script>

<script>
    // Firebase configuration
    var firebaseConfig = {
        apiKey: "AIzaSyDX4j_urjkjhoxeN5AHFxcOW1viBqsicWA",
        authDomain: "alleysway-310a8.firebaseapp.com",
        databaseURL: "https://alleysway-310a8-default-rtdb.firebaseio.com",
        projectId: "alleysway-310a8",
        storageBucket: "alleysway-310a8.appspot.com",
        messagingSenderId: "890106355046",
        appId: "1:890106355046:web:8101b0ff960c28943efca7",
        measurementId: "G-DFMZCZGFT0"
    };
    firebase.initializeApp(firebaseConfig);

    var firebaseToken = '@Html.Raw(ViewBag.FirebaseToken)';

    firebase.auth().signInWithCustomToken(firebaseToken).catch(function (error) {
        console.error('Firebase sign-in error:', error);
    });

    firebase.auth().onAuthStateChanged(function (user) {
        if (user) {
            loadUsers();
        } else {
            console.log('User is not authenticated');
        }
    });

    var selectedUserId = null;
    var selectedUserName = null;
    var conversationRef = null;

    function loadUsers() {
        var currentUser = firebase.auth().currentUser.uid;
        var usersRef = firebase.database().ref('users');
        var messagesRef = firebase.database().ref('user_messages/' + currentUser);

        messagesRef.once('value').then(function (messagesSnapshot) {
            var activeUsers = {}; // Object to keep track of users with open chats

            // Collect all user IDs with whom the current user has messages
            messagesSnapshot.forEach(function (childSnapshot) {
                activeUsers[childSnapshot.key] = true;
            });

            usersRef.once('value').then(function (usersSnapshot) {
                var usersList = document.getElementById('users');
                usersList.innerHTML = '';

                usersSnapshot.forEach(function (childSnapshot) {
                    var userId = childSnapshot.key;
                    var userData = childSnapshot.val();

                    // Check if the user is in the list of active chats
                    if (activeUsers[userId] && userId !== currentUser) {
                        var profileImageUrl = userData.profileImageUrl || '/images/default.jpg'; // Use default image

                        var li = document.createElement('li');
                        li.innerHTML = `
                            <img src="${profileImageUrl}" alt="Profile Image">
                            <span>${userData.firstName} ${userData.lastName}</span>
                        `;
                        li.setAttribute('data-user-id', userId);
                        li.style.cursor = 'pointer';

                        li.addEventListener('click', function () {
                            selectUser(userId, userData.firstName + ' ' + userData.lastName);
                        });

                        usersList.appendChild(li);
                    }
                });
            });
        });
    }


    function selectUser(userId, userName) {
        selectedUserId = userId;
        selectedUserName = userName;
        document.getElementById('chatWith').textContent = userName;

        // Clear previous messages
        document.getElementById('messages').innerHTML = '';

        // Re-initialize the chat with the selected user
        initializeChat();
    }

    function initializeChat() {
        if (!selectedUserId) {
            console.log('No user selected for chat.');
            return;
        }

        var database = firebase.database();
        var userId = firebase.auth().currentUser.uid;

        // Detach previous listener if any
        if (conversationRef) {
            conversationRef.off();
        }

        conversationRef = database.ref('user_messages/' + userId + '/' + selectedUserId + '/messages');

        conversationRef.on('child_added', function (data) {
            var message = data.val();
            displayMessage(message.senderName, message.text, message.timestamp);
        });

        document.getElementById('sendButton').addEventListener('click', sendMessage);
        document.getElementById('messageInput').addEventListener('keyup', function (event) {
            if (event.keyCode === 13) {
                sendMessage();
            }
        });
    }

    function sendMessage() {
        if (!selectedUserId) {
            alert('Please select a user to chat with.');
            return;
        }

        var messageText = document.getElementById('messageInput').value.trim();
        if (messageText !== '') {
            var senderId = firebase.auth().currentUser.uid;
            var senderName = '@ViewBag.Name';
            var receiverId = selectedUserId;

            var message = {
                senderId: senderId,
                senderName: senderName,
                receiverId: receiverId,
                text: messageText,
                timestamp: firebase.database.ServerValue.TIMESTAMP
            };

            // Store the message under both users
            var updates = {};
            var newMessageKey = firebase.database().ref().child('user_messages').push().key;

            updates['/user_messages/' + senderId + '/' + receiverId + '/messages/' + newMessageKey] = message;
            updates['/user_messages/' + receiverId + '/' + senderId + '/messages/' + newMessageKey] = message;

            firebase.database().ref().update(updates).then(function () {
                console.log('Message sent');
            }).catch(function (error) {
                console.error('Error sending message:', error);
            });

            document.getElementById('messageInput').value = '';
        }
    }

    function displayMessage(userName, text, timestamp) {
        var messagesDiv = document.getElementById('messages');
        var messageElement = document.createElement('div');
        var time = new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

        // Check if the message is sent by the current user
        var isSentByCurrentUser = (userName === '@ViewBag.Name');

        messageElement.classList.add('bubble');
        if (isSentByCurrentUser) {
            messageElement.classList.add('sent');
        } else {
            messageElement.classList.add('received');
        }

        messageElement.innerHTML = `
                    <div class="bubble-text">${text}</div>
                    <span class="timestamp">${time}</span>
                `;

        messagesDiv.appendChild(messageElement);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }
</script>
